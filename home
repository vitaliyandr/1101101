import 'dart:math';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:rick_and_morty/domain/character.dart';
import 'package:rick_and_morty/presentation/screens/character_details_page.dart';
import 'package:rick_and_morty/presentation/screens/favorite_characters_page.dart';
import 'package:rick_and_morty/presentation/widgets/list_character.dart';

class Home extends StatelessWidget {
  final HomeController _homeController = Get.put(HomeController());

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Rick and Morty - Character information'),
        centerTitle: true,
        backgroundColor: const Color.fromARGB(255, 47, 146, 228),
        actions: [
          IconButton(
            onPressed: () {
              Get.to(() => FavoriteCharactersPage(
                    favoriteCharacters: _homeController.favoriteCharacters,
                  ));
            },
            icon: const Icon(Icons.favorite),
          ),
        ],
      ),
      body: SafeArea(
        child: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color.fromARGB(255, 79, 132, 182), Color.fromARGB(255, 149, 160, 165)],
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
            ),
          ),
          child: SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.all(8.0),
              child: Column(
                children: [
                  _buildSearchField(),
                  const SizedBox(height: 16),
                  _buildStatusFilter(),
                  const SizedBox(height: 16),
                  AnimatedSwitcher(
                    duration: const Duration(milliseconds: 300),
                    child: ListCharacter(
                      key: ValueKey(_homeController.selectedStatus + _homeController.searchQuery),
                      characters: _homeController.filteredCharacters,
                      searchQuery: _homeController.searchQuery,
                      statusFilter: _homeController.selectedStatus,
                      onCharacterSelected: (character) => _homeController.showCharacterDetails(character),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          _homeController.showRandomCharacterDetails();
        },
        tooltip: 'Random Character',
        child: Icon(Icons.shuffle),
      ),
    );
  }

  Widget _buildSearchField() {
    return TextField(
      onChanged: (value) {
        _homeController.setSearchQuery(value);
      },
      decoration: InputDecoration(
        labelText: 'Search',
        prefixIcon: Icon(Icons.search),
        suffixIcon: _homeController.searchQuery.isNotEmpty
            ? IconButton(
                onPressed: () {
                  _homeController.clearSearchQuery();
                },
                icon: const Icon(Icons.clear),
              )
            : null,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
        ),
      ),
    );
  }

  Widget _buildStatusFilter() {
    return DropdownButton<String>(
      value: _homeController.selectedStatus,
      items: ['All', 'Alive', 'Dead', 'Unknown'].map((item) {
        return DropdownMenuItem<String>(
          value: item,
          child: Text(item),
        );
      }).toList(),
      onChanged: (value) {
        _homeController.setStatusFilter(value!);
      },
      hint: const Text('Status Filter'),
    );
  }
}

class HomeController extends GetxController {
  String searchQuery = '';
  String selectedStatus = 'All';
  List<Character> allCharacters = []; // Store all characters here
  List<Character> favoriteCharacters = [];

  // Create a computed property to get the filtered characters
  List<Character> get filteredCharacters {
    return _filterCharacters(allCharacters, searchQuery, selectedStatus);
  }

  void setAllCharacters(List<Character> characters) {
    allCharacters = characters;
    update();
  }

  void setSearchQuery(String value) {
    searchQuery = value;
    update();
  }

  void clearSearchQuery() {
    searchQuery = '';
    update();
  }

  void setStatusFilter(String value) {
    selectedStatus = value;
    update();
  }

  void addToFavorites(Character character) {
    favoriteCharacters.add(character);
    Get.snackbar(
      'Added to Favorites',
      '${character.name} added to favorites',
      backgroundColor: Colors.green,
      colorText: Colors.white,
    );
  }

  void showCharacterDetails(Character character) {
    Get.to(() => CharacterDetailsPage(
          character: character,
          onAddToFavorites: addToFavorites, onRemoveFromFavorites: (Character character) {  },
        ));
  }

  void showRandomCharacterDetails() {
    if (favoriteCharacters.isEmpty) return;
    final randomIndex = Random().nextInt(favoriteCharacters.length);
    final randomCharacter = favoriteCharacters[randomIndex];

    Get.to(() => CharacterDetailsPage(
          character: randomCharacter,
          onAddToFavorites: addToFavorites, onRemoveFromFavorites: (Character character) {  },
        ));
  }

  // Function to filter characters based on search query and status
  List<Character> _filterCharacters(List<Character> characters, String searchQuery, String statusFilter) {
    if (statusFilter == 'All' && searchQuery.isEmpty) {
      return characters;
    }

    final filteredList = characters.where((character) {
      final nameMatches = character.name.toLowerCase().contains(searchQuery.toLowerCase());
      final statusMatches = statusFilter == 'All' || character.status.toLowerCase() == statusFilter.toLowerCase();

      return nameMatches && statusMatches;
    }).toList();

    return filteredList;
  }
}
